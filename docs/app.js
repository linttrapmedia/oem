function J(e,n){if(!n)return e;let o=n.storage.getItem(n.key),r=JSON.parse(o),s=r!==null&&r!==void 0;if((n.overwrite??!0)&&s)return r;if(!(n.overwrite??!0)&&s){if(Array.isArray(e)&&Array.isArray(r))return[...e,...r];else if(typeof e==="object"&&typeof r==="object")return{...e,...r}}return e}function C(e,n){let o=J(e,n),r=[],s=()=>o,a=(i)=>{if(o=i,r.forEach((T)=>T(i)),n)n.storage.setItem(n.key,JSON.stringify(i))};return{val:o,reduce:(i)=>a(i(o)),set:a,sub:(i)=>{if(!r.includes(i))r.push(i)},test:(i,T=!0)=>{let v=JSON.stringify(o);if(i instanceof RegExp){let u=i.test(v);return T?u:!u}else if(typeof i==="function"&&i instanceof Function){let u=i(o);return T?u:!u}else{let u=JSON.stringify(i),L=v===u;return T?L:!L}},unsub:(i)=>r.splice(r.indexOf(i),1),$val:s,$reduce:(i)=>()=>a(i(s())),$set:(i)=>()=>a(i),$test:(i,T=!0)=>()=>{let v=JSON.stringify(o);if(i instanceof RegExp){let u=i.test(v);return T?u:!u}else if(typeof i==="function"&&i instanceof Function){let u=i(o);return T?u:!u}else{let u=JSON.stringify(i),L=v===u;return T?L:!L}}}}var z=new Map,X=new MutationObserver((e)=>{e.forEach((n)=>{if(n.addedNodes.length>0&&n.type==="childList"){for(let o of Array.from(n.addedNodes))if(o instanceof Element)for(let[r,[s,a]]of z.entries()){let c=Array.from(o.querySelectorAll(r));for(let y of c)I(y,s,a)}}})});X.observe(document,{attributes:!0,childList:!0,subtree:!0});function Q(e,n=!0,o){return(...r)=>{if(n)z.set(e,[r,o]);let s=Array.from(document.querySelectorAll(e));for(let a of s)I(a,r,o)}}function Z(e,n){return(...o)=>I(e,o,n)}function tt(e,n){return(...o)=>{let s=document.createElementNS("http://www.w3.org/1999/xhtml",e);return I(s,o,n)}}function I(e,n=[],o={}){n.forEach(([s,...a])=>o[s](e,...a));function r(...s){return s.forEach((a)=>{if(a)e.append(a)}),e}return r}function P(e){return new Proxy({},{get:(n,o)=>{if(o==="el")return(r)=>Z(r,e);if(o==="$el")return(r,s)=>Q(r,s,e);return tt(o,e)}})}function W(e,n=[],o={}){n.forEach(([s,...a])=>o[s](e,...a));function r(...s){return s.forEach((a)=>e.append(a)),e}return r}function $(e){return new Proxy({},{get:(n,o)=>{if(o==="el")return(r)=>(...s)=>W(r,s,e);return(...r)=>{let a=document.createElementNS("http://www.w3.org/2000/svg",o);return W(a,r,e)}}})}function O(e){let{event:n=null,eventElement:o=window,invokeImmediately:r=!0,mediaMinWidth:s=0,mediaMaxWidth:a=1/0,state:c=void 0}=e??{};return(...y)=>{let[h,f,S,M]=y,w=()=>{if(!(window.innerWidth>=s&&window.innerWidth<=a))return;let v=c&&typeof S==="function"?S(c.$val()):S;if(typeof M==="function"?M(c?c.$val():void 0):M??!0)if(v===void 0)h.removeAttribute(f);else h.setAttribute(f,String(v))};if(c)c.sub(w);if(n)(h??o).addEventListener(n,w);let i=new ResizeObserver(w);if(i.observe(h),i.observe(document.body),r)w()}}function R(e){let{state:n,event:o}=e??{};return(...r)=>{let[s,a,c]=r,y=()=>{let h=(S)=>a(S);if(s.removeEventListener(o,h),typeof c==="function"?c(n?n.$val():void 0):c??!0)s.addEventListener(o,h)};if(n)n.sub(y);y()}}function F(e){let{state:n}=e??{};return(...o)=>{let[r,s,a]=o,c=()=>{let y=n?s(n.$val()):s();if(typeof a==="function"?a(n?n.val:void 0):a??!0){if(r.innerHTML="",y!==void 0)if(Array.isArray(y))y.filter((f)=>f).forEach((f)=>{if(f instanceof HTMLElement||f instanceof SVGElement)r.appendChild(f);else r.appendChild(document.createTextNode(String(f)))});else if(y instanceof HTMLElement||y instanceof SVGElement)r.appendChild(y);else r.innerHTML=String(y)}};if(n)n.sub(c);c()}}function E(e){let{event:n=null,eventElement:o=window,invokeImmediately:r=!0,mediaMinWidth:s=0,mediaMaxWidth:a=1/0,state:c=void 0}=e??{};return(...y)=>{let[h,f,S,M]=y,w=()=>{if(!(window.innerWidth>=s&&window.innerWidth<=a))return;let v=typeof S==="function"?S(c?c.$val():void 0):S;if(typeof M==="function"?M(c?c.$val():void 0):M??!0)if(v===void 0)h.style.removeProperty(f);else f.startsWith("--")?h.style.setProperty(f,v):h.style[f]=v};if(c)c.sub(w);let i=new ResizeObserver(w);if(i.observe(h),i.observe(document.body),n)(h??o).addEventListener(n,w);if(r&&!n)w()}}var et=()=>(e)=>{e.style.display="block",e.style.whiteSpace="pre",e.style.fontFamily="monospace",e.style.color="white",e.style.backgroundColor="black",e.style.padding="30px",e.style.borderRadius="5px",e.style.overflowX="auto",e.style.maxWidth="100%",e.style.width="100%",e.style.minWidth="0",e.style.boxSizing="border-box",e.style.wordBreak="normal";let n=new MutationObserver((o)=>{o.forEach((r)=>{if(r.type==="childList"){if(r.addedNodes.length>0){n.disconnect();let s=Prism.highlight(e.innerText,Prism.languages.typescript);e.innerHTML=s}}})});return n.observe(e,{childList:!0}),e},d=C("introduction",{key:"menuState",storage:localStorage}),k=C(!1),t=P({attr:O(),click:R({event:"click"}),prism:et(),style:E(),"html:menu":F({state:d}),"html:menu_toggle":F({state:k}),"style:menu":E({state:d}),"style:menu_toggle":E({state:k}),"style:tablet":E({mediaMinWidth:800}),"style:mouseover":E({event:"mouseover"}),"style:mouseout":E({event:"mouseout"})}),St=$({attr:O(),style:E(),click:R({event:"click"}),"style:mouseover":E({event:"mouseover"}),"style:mouseout":E({event:"mouseout"})});var m=(e,n,...o)=>t.div(["attr","data-part","Box"],["style","flexDirection",e],["style","alignItems","center"],["style","boxSizing","border-box"],["style","display","grid"],["style","fontFamily","Space Grotesk"],["style","gap",`${n}px`],["style","minWidth",0],["style","overflow","hidden"],["style","width","100%"],["style","alignItems","stretch"])(...o);var b=({next:e,prev:n})=>t.div(["style","display","flex"],["style","flexDirection","row"],["style","justifyContent","space-evenly"],["style","alignItems","center"],["style","width","100%"],["style","boxSizing","border-box"],["style","padding","20px"],["style","fontFamily","monospace"],["style","fontSize","14px"],["style","backgroundColor","black"],["style","color","white"],["style","borderRadius","5px"])(n&&t.div(["style","cursor","pointer"],["click",()=>d.set(n.menuState)])(`← ${n.title}`),e&&t.div(["style","cursor","pointer"],["click",()=>d.set(e.menuState)])(`${e.title} →`));var p=(...e)=>t.div(["attr","data-part","Page"],["style","flexDirection","column"],["style","alignItems","center"],["style","boxSizing","border-box"],["style","display","flex"],["style","fontFamily","Space Grotesk"],["style","justifyContent","center"],["style","gap","30px"],["style","maxWidth","1000px"],["style","minWidth",0])(...e);p.Header=(e,n)=>t.div(["style","display","flex"],["style","flexDirection","column"],["style","alignItems","center"],["style","justifyContent","center"],["style","textAlign","center"],["style","gap","10px"])(t.h1(["style","fontSize","48px"],["style","margin","0"],["style","padding","0"],["style","fontWeight","bold"])(e),n?t.h2(["style","fontSize","18px"],["style","margin","0"],["style","padding","0"],["style","fontWeight","normal"],["style","opacity",0.7])(n):null);var l=({content:e,title:n,subtitle:o})=>t.div(["attr","data-part","Section"],["style","flexDirection","column"],["style","alignItems","center"],["style","boxSizing","border-box"],["style","display","flex"],["style","fontFamily","Space Grotesk"],["style","minWidth",0])(t.h2(["style","fontSize","32px"],["style","textAlign","center"],["style","padding",0],["style","margin",0])(n),o&&t.div(["style","fontSize","16px"],["style","opacity",0.5],["style","textAlign","center"],["style","padding","10px 20px 20px 20px"])(o),t.div(["attr","data-part","SectionContent"],["style","flexDirection","column"],["style","alignItems","center"],["style","boxSizing","border-box"],["style","display","flex"],["style","fontFamily","Space Grotesk"],["style","justifyContent","center"],["style","width","100%"],["style","display","flex"],["style","minWidth",0])(e));var x=(e)=>t.code(["style","backgroundColor","rgba(0,0,0,0.1)"],["style","borderRadius","3px"],["style","fontFamily","monospace"],["style","fontSize","14px"],["style","padding","2px 5px"],["style","margin","0 2px"])(e),H=(...e)=>t.small(["style","display","block"],["style","fontSize","13px"],["style","opacity",0.5],["style","textAlign","center"],["style","padding","20px"],["style","marginBottom","20px"],["style","backgroundColor","rgba(0,0,0,0.1)"])(...e);var N=()=>p(p.Header("Docs","OEM only has two functions — HTML and State. Here's how they work."),l({title:"HTML",subtitle:"OEM's HTML template engine is a lightweight and efficient way to create and manage HTML elements in your application.",content:m("column",10,t.pre(["prism"])(`import { HTML } from 'oem';

// create a trait
const style = (el: HTMLElement, key: string, value: string) => {
  el.style[key as any] = value;
}
      
// create a template engine and map the style trait
const tmpl = HTML({ style });

// use it 
tmpl.div(['style','color','red'])('Hello, OEM!');
// <div style="color: red;">Hello, OEM!</div>
`))}),H("There's also an ",x("SVG")," version of the HTML function for creating SVG elements."),l({title:"State",subtitle:"OEM's built-in state management is simple yet powerful. Each state object is a micro event bus that can be used anywhere in your application.",content:m("column",10,t.pre(["prism"])(`import { State } from 'oem'; 

// create a state object
const color = State<'green' | 'red'>('red');

// getting
console.log(color.val);
console.log(color.$val()); // (cb version)

// setting
color.set('green'); 
const setToRed = color.$set('red'); // (cb version)

// reducing
color.reduce((prev) => prev === 'red' ? 'green' : 'red');
color.$reduce((prev) => prev === 'red' ? 'green' : 'red'); // (cb version)

// subscribe to changes
const colorSub = (clr) =>  console.log('Color changed to:', clr);
color.sub(colorSub);

// unsubscribe from changes
color.unsub(colorSub);

// testing value
color.test('red'); // by string
color.test('red', false); // by string, false for NOT equal
color.$test('red');  // by string, (cb version)
color.$test('red', false); // by string, (cb version) NOT equal
color.test(/red/); // by regex
color.$test(/red/); // by regex, (cb version)
color.test((val) => val === 'red'); // by function
color.$test((val) => val === 'red'); // by function, (cb version)
`))}),l({title:"Learn (~10min)",subtitle:"You can learn the core concepts of OEM in about 10 minutes. Follow along with the examples to get a feel for how OEM works.",content:b({next:{title:"Templates",menuState:"templates"},prev:{title:"Intro",menuState:"introduction"}})}));var g={Grid:(...e)=>t.div(["style","borderRadius","5px"],["style","boxSizing","border-box"],["style","display","grid"],["style","gridTemplateColumns","1fr 1fr"],["style","width","100%"])(...e),Header:(e)=>t.div(["style","backgroundColor","rgba(0,0,0,0.1)"],["style","padding","10px"])(e),Cell:(e)=>t.div(["style","padding","10px"],["style","borderBottom","1px solid rgba(0,0,0,0.1)"],["style","fontSize","13px"],["style:tablet","fontSize","16px"])(e)};var _=()=>p(p.Header("Factory","Pre-built components,  templates and generators for rapid development"),l({title:"Ready-Made Traits",subtitle:"OEM Factory provides a set of powerful pre-built traits that include configurations for responding to events, media queries and state objects with the Locality of Behavior pattern included which covers 95% of use cases out of the box.",content:g.Grid(g.Header("Trait"),g.Header("Description"),g.Cell(t.a(["attr","href","https://raw.githubusercontent.com/linttrapmedia/oem/refs/heads/main/src/traits/Style.ts"],["attr","target","_blank"])("useAttribute")),g.Cell("Apply attributes"),g.Cell(t.a(["attr","href","https://raw.githubusercontent.com/linttrapmedia/oem/refs/heads/main/src/traits/ClassName.ts"],["attr","target","_blank"])("useClassName")),g.Cell("Apply class names"),g.Cell(t.a(["attr","href","https://raw.githubusercontent.com/linttrapmedia/oem/refs/heads/main/src/traits/Event.ts"],["attr","target","_blank"])("useEvent")),g.Cell("Attach event listener"),g.Cell(t.a(["attr","href","https://raw.githubusercontent.com/linttrapmedia/oem/refs/heads/main/src/traits/InnerHTML.ts"],["attr","target","_blank"])("useInnerHTML")),g.Cell("Attach event listener"),g.Cell(t.a(["attr","href","https://raw.githubusercontent.com/linttrapmedia/oem/refs/heads/main/src/traits/TextContent.ts"],["attr","target","_blank"])("useTextContent")),g.Cell("Apply inner text"),g.Cell(t.a(["attr","href","https://raw.githubusercontent.com/linttrapmedia/oem/refs/heads/main/src/traits/Style.ts"],["attr","target","_blank"])("useStyle")),g.Cell("Apply styles"))}),l({title:"Thank You",subtitle:"We appreciate your interest in OEM. We hope you find this project useful. Feel free to contribute or provide feedback!",content:b({next:{title:"Intro",menuState:"introduction"},prev:{title:"Patterns",menuState:"patterns"}})}));var G=()=>t.div(["style","alignItems","center"],["style","boxSizing","border-box"],["style","borderRadius","5px"],["style","display","grid"],["style","display","flex"],["style","flexWrap","wrap"],["style","fontFamily","Space Grotesk"],["style","gap","5px"],["style","justifyContent","center"],["style","width","100%"])(...[["\uD83D\uDCAB","Reactive DOM"],["\uD83D\uDC85","Responsive Styles"],["\uD83D\uDCFC","State Management"],["\uD83D\uDD4A️","No Dependencies"],["\uD83E\uDEB6","Flyweight Size"],["\uD83E\uDDF1","Isomorphic Syntax"],["\uD83E\uDDE9","Typescript"],["\uD83E\uDD16","AI-Friendly"],["\uD83D\uDD12","Secure"],["\uD83E\uDDEA","100% Test Coverage"],["\uD83D\uDCA9","No Virtual DOM"]].map(([e,n])=>t.div(["style","alignItems","center"],["style","backgroundColor","black"],["style","boxSizing","border-box"],["style","borderRadius","20px"],["style","display","flex"],["style","fontSize","13px"],["style","gap","10px"],["style","justifyContent","center"],["style","border","none"],["style","border","1px solid rgba(255,255,255,0.3)"],["style","padding","10px 15px"],["style","color","white"])(t.span(["style","fontSize","11px"])(e),t.span(["style","fontWeight","bold"])(n))));var B=()=>p(p.Header("OEM","The flyweight UI library for the modern web"),l({title:"Features",subtitle:"OEM is a tiny layer-one utility that provides just enough structure to build powerful micro-templating engines with the following features:",content:m("column",20,t.div(["style","alignItems","center"],["style","boxSizing","border-box"],["style","display","grid"],["style","flexWrap","wrap"],["style","gap","20px"],["style","justifyContent","center"],["style","width","100%"],["style:tablet","borderRight","1px dashed black"],["style","borderRight","none"],["style:tablet","borderBottom","none"])(G()))}),l({title:"Install",subtitle:"Get started with OEM in seconds.",content:m("column",20,t.div(["prism"])("npm i @linttrap/oem"),t.div(["style","opacity",0.35],["style","fontSize","14px"],["style","textAlign","center"])("Or download with unpkg at ",t.a(["attr","href","https://unpkg.com/@linttrap/oem@latest/dist/oem.min.js"],["attr","target","_blank"])("unpkg")))}),l({title:"Docs",subtitle:"Explore the full documentation to learn more about OEM's core concepts and how to build with it.",content:b({next:{title:"Docs",menuState:"docs"}})}));var j=()=>p(p.Header("Patterns","Common patterns for building applications with OEM"),l({title:"Idiomatic Traits",subtitle:"You want your traits to be configurable, declarative, able to respond to state changes and play nice with the Locality of Behavior pattern.",content:m("column",10,t.div(["style","textAlign","center"])("Here's the basic outline of a trait that responds to state changes and only applies when a condition is met:"),t.pre(["prism"])(`function useStyleTrait(props) { // <-- configurable
  return function(el, prop, val, cond) { // <-- your trait function
    const apply = () => { // <-- your apply function
      if (cond ? cond() : true) { ... } // <-- the condition to apply
    };
    if (props.state) state.sub(apply); // <-- respond to state changes
    apply(); // <-- initial application
  };
}`),t.div(["style","textAlign","center"])("The Locality of Behavior pattern: Using the template above you can not only register this trait across multiple template engines, but same engine, multiple times. Prefixing with the trait name and what it applies to helps keeps things straight"),t.pre(["prism"])(`// register the trait multiple times and 
// have them respond to different state objects
const tmpl = HTML({
  'style:a': useStyleTrait({ state: stateObjectA }),
  'style:b': useStyleTrait({ state: stateObjectB }),
});

// somewhere in your app
// use both traits, multiple times
// on state change, re-evaluate and re-apply
// this is the Locality of Behavior pattern
tmpl.div(
  ['style:a', 'color', 'red', isAchecked],
  ['style:a', 'color', 'green', isAunchecked],
  ['style:b', 'fontSize', '10px', isBchecked],
  ['style:b', 'fontSize', '20px', isBunchecked],
)();
`),H("Notice how with this pattern you can conditionally apply the same style property multiple times based on different state objects? You can't do that with JSX or CSS without ugly if statements or complex class management. This keeps your code declarative and easy to reason about."))}),l({title:"Component Composition",subtitle:'Creating a "component" is just making a function that returns templated elements. However, there are certain practices that make them easier to work with and reuse.',content:m("column",10,t.div(["style","textAlign","center"])(`Since all state and template behavior comes from a template engine, you don't have to "prop drill" behavioral and presentational logic into your components. This keeps your components simple and focused on just rendering.`),t.pre(["prism"])(`// define a reusable button component
const Button = (label, onClick) => 
  tmpl.button(
    ['style', 'padding', '10px 20px'],
    ['style', 'backgroundColor', 'blue'],
    ['style', 'color', 'white'],
    ['onClick', onClick]
  )(label);

// use the Button component within another component
const App = () => 
  tmpl.div()(
    Button('Click Me', () => alert('Button Clicked!')),
    Button('Submit', () => alert('Form Submitted!'))
  );
`),H("With this pattern, you don't need crazy CSS frameworks that require compile time optimization etc, the syntax isn't crazy and following some abstract naming convention. It keeps everything declarative and makes for an excellent foundation for an AI friendly design system."),t.div(["style","textAlign","center"])("What if you don't want to use the same template engine for your entire app? No problem, just define a template engine within your component! Heck, you even use more than one template engine within the same component if you want."),t.pre(["prism"])(`// define a component with its own template engine
const Card = (title, content) => {
  const cardTmpl = HTML({ /* traits specific to Card */ });
  return cardTmpl.div(
    ['style', 'border', '1px solid #ccc'],
    ['style', 'padding', '20px'],
    ['style', 'borderRadius', '5px']
  )(
    tmpl.h2( // <-- using the global tmpl engine
      ['style', 'color', 'red', alertState.$test(1)],
      ['style', 'color', 'black', alertState.$test(1, false)]
    )(title),
    cardTmpl.p()(content)
  );
};

// use the Card component
const App = () => 
  tmpl.div()(
    Card('Card Title', 'This is the content of the card.'),
    Card('Another Card', 'More content here.')
  );
`))}),l({title:"Application Structure",subtitle:"The missing piece for many UI libraries is a clear structure for organizing your application. With OEM, you can establish a consistent structure that separates concerns and promotes maintainability.",content:m("column",10,t.div(["style","textAlign","center"])("Separate concerns by feature. For small apps, make them single files, for larger apps, make them folders/files."),t.div(["prism"])(`- components // reusable stateless components
- features // stateful features of your app
- pages // pages
- state // your state objects
- actions // your state manipulation functions
- fsm // a finite state machine
- templates // your template engines
- traits // your traits
// models, entities, utils, etc.
`))}),l({title:"Factory",subtitle:"Now that you know the basics of creating elements with templates, manipulating it with traits and managing state, let's look at some common patterns to build a real application.",content:b({prev:{title:"State",menuState:"state"},next:{title:"Factory",menuState:"factory"}})}));var D=()=>p(p.Header("State","Managing dynamic data with OEM State"),l({title:"The State Object",subtitle:"Each state object in OEM is a micro event bus that can be used anywhere in your application. Although OEM is state management agnostic, it's built-in state management works great for most use cases.",content:m("column",10,t.div(["style","textAlign","center"])("Import the State function to create a state object"),t.pre(["prism"])(`import { State } from 'oem';
const color = State<'red' | 'green'>('red');`))}),l({title:"Getting",subtitle:"Getting the current value of the state is straight forward.",content:m("column",10,t.div(["style","textAlign","center"])("Get the current value with the  ",x("val")," property."),t.pre(["prism"])("color.val;"),t.div(["style","textAlign","center"])("Or with the method  ",x("$val()"),"."),t.pre(["prism"])("color.$val();"))}),l({title:"Setting",subtitle:"Setting state is straight forward as well and includes a few helper methods which begins to introduce some OEM specific patterns.",content:m("column",10,t.div(["style","textAlign","center"])("Set state with the  ",x("set")," method."),t.pre(["prism"])("color.set('blue');"),t.div(["style","textAlign","center"])("Or create callback version of it with  ",x("$set")," to be called later. More on this in the patterns section."),t.pre(["prism"])(`const setToBlue = color.$set('blue');
setToBlue();`),t.div(["style","textAlign","center"])("State can also be set using a reducer with the ",x("reduce")," method."),t.pre(["prism"])("color.reduce((prev) => prev === 'red' ? 'blue' : 'red');"),t.div(["style","textAlign","center"])("Or create callback version of it with  ",x("$reduce")," to call it later."),t.pre(["prism"])(`const toggleColor = color.$reduce((prev) => prev === 'red' ? 'blue' : 'red');
toggleColor();`))}),l({title:"Subscribing",subtitle:"Subscribing to state changes is an important part of state management. OEM makes this easy with the built-in pub/sub pattern.",content:m("column",10,t.div(["style","textAlign","center"])("Subscribe by calling the ",x("sub")," method."),t.pre(["prism"])(`const cb = (val) => console.log(val)
color.sub(cb);`),t.div(["style","textAlign","center"])("You can unsubscribe from state changes by calling ",x("unsub(cb)")),t.pre(["prism"])("color.unsub(callback);"))}),l({title:"Testing",subtitle:"Testing the current state value is useful for conditionally applying traits or other logic in your application.",content:m("column",10,t.div(["style","textAlign","center"])("Test if the current state matches a value with the ",x("test")," method. Note: equality is determined by comparing the serialized values."),t.pre(["prism"])(`color.test('red');
color.$test('red'); // callback version
`),t.div(["style","textAlign","center"])("Works with regular expressions too"),t.pre(["prism"])(`color.test(/red/);
color.$test(/red/); // callback version`),t.div(["style","textAlign","center"])("You can also check for inequality by passing a second argument"),t.pre(["prism"])(`color.test('red', false); // returns true if color is NOT 'red'
color.$test('red', false); // callback version`))}),l({title:"Patterns",subtitle:"Now that you know the basics of creating elements with templates, manipulating it with traits and managing state, let's look at some common patterns to build a real application.",content:b({next:{title:"Patterns",menuState:"patterns"},prev:{title:"Traits",menuState:"traits"}})}));var K=()=>p(p.Header("Templates","Creating micro-templating engines with OEM"),l({title:"The HTML function",subtitle:"The HTML function creates a templating engine that can generate HTML elements.",content:m("column",10,t.div(["style","textAlign","center"])("Import the HTML function to create an HTML templating engine"),t.pre(["prism"])(`import { HTML } from 'oem';
const tmpl = HTML({...});`),t.div(["style","textAlign","center"])("You can now generate HTML elements with the templating engine. Notice that the tag generating function is curried. More on that later."),t.pre(["prism"])(`html.div()('Hello World!');
// returns <div>Hello World!</div>`))}),l({title:"Traits",subtitle:"Your template engine can generate html tags, but that's it. How can we add functionality? Small functions called traits. ",content:b({next:{title:"Traits",menuState:"traits"},prev:{title:"Intro",menuState:"introduction"}})}));var U=()=>p(p.Header("Traits","Adding functionality to your templating engine with traits"),l({title:"The Trait Function",subtitle:'A "trait" is just a function that takes an element as its first argument and does something to it.',content:m("column",20,t.div(["style","textAlign","center"])("Here's the basic template for a trait function:"),t.div(["prism"])("const useStyle = (el: HTMLElement) => {...}"),t.div(["style","textAlign","center"])('Here is an example of a very simple "style" trait for applying css styles to an element.'),t.div(["prism"])(`const useStyle = (el: HTMLElement, prop: string, value: string) => {
  el.style[prop] = value;
}`),t.div(["style","textAlign","center"])("This trait can now be added to your templating engine like this:"),t.div(["prism"])('const tmpl = HTML({ "style": useStyle });'),t.div(["style","textAlign","center"])(`Now, when you render an element, the first curried function takes a list of traits to apply to the element. 'style' will be intellisensed along with it's arguments 'prop' and 'value' (everything after the 'el' argument in your trait function). Here is how you would use the "style" trait to make some text red, 24px, and centered:`),t.div(["prism"])(`tmpl.div(
  ['style','color', 'red'],
  ['style','fontSize','24px'],
  ['style','textAlign','center']
)('...');`),H("Note: you could have applied the style textAlign trait multiple times to the same element with different values, and it would apply them in order. However, that would only make sense if we had a way to add a condition. That's exactly what we cover in the Patterns section. First, let's see how State works."))}),l({title:"State",subtitle:'OK, we can generate html, and now have a way to manipulate it with traits. But how do we make it dynamic? What if we could reapply traits when something changes? Enter "State".',content:b({next:{title:"State",menuState:"state"},prev:{title:"Templates",menuState:"templates"}})}));var V={name:"@linttrap/oem",author:"@linttrapmedia",title:"oem",version:"1.0.0",description:"A novel UI library for writing reactive html with vanilla javascript",type:"module",exports:{".":"./src/index.ts"},main:"./src/index.ts",module:"./src/index.ts",repository:{type:"git",url:"git+https://github.com/linttrapmedia/oem.git"},license:"MIT",bugs:{url:"https://github.com/linttrapmedia/oem/issues"},homepage:"https://oem.js.org",devDependencies:{jsdom:"^21.1.0",prettier:"2.7.1","@types/bun":"latest"},dependencies:{"resize-observer-polyfill":"^1.5.1"},private:!1,peerDependencies:{typescript:"^5"}};var A=(e,n)=>t.div(["style","padding","10px 20px"],["style","cursor","pointer"],["style","transition","background-color 0.3s"],["style","textTransform","uppercase"],["click",d.$set(n)],["style:menu","color","yellow",d.test(n)])(e),q=()=>t.div(["style","backgroundColor","black"],["style","color","white"],["style","padding","10px"],["style","fontWeight","bold"],["style","fontFamily","monospace"],["style","display","flex"],["style","flexDirection","column"],["style","alignItems","center"],["style","justifyContent","center"],["style","textAlign","center"],["html:menu",()=>[t.div(["style","position","absolute"],["style","top","10px"],["style","right","10px"],["style","cursor","pointer"],["style","fontSize","21px"],["style","textTransform","uppercase"],["style","padding","5px"],["style","opacity","0.5"],["style","display","flex"],["style:tablet","display","none"],["click",k.$reduce((e)=>!e)],["html:menu_toggle",()=>"-",k.$test(!0)],["html:menu_toggle",()=>"=",k.$test(!1)])(),t.div(["style","display","flex"],["style","flexDirection","column"],["style","alignItems","center"],["style","justifyContent","center"],["style","position","relative"])(t.div(["style","display","flex"],["style","letterSpacing","2px"],["style","fontSize","40px"],["style","textAlign","left"],["style","lineHeight",0.75],["style","color","white"],["style","fontFamily","Splash"],["style","gap","5px"],["style","fontWeight","normal"])("oem",t.span(["style","fontSize","10px"],["style","fontWeight","bold"],["style","fontFamily","monospace"],["style","letterSpacing","0"],["style","color","yellow"])(V.version))),t.div(["style","display","flex"],["style","flexDirection","column"],["style","justifyContent","center"],["style:menu_toggle","display","none",k.$test(!1)],["style:menu_toggle","display","flex",k.$test(!0)],["style:tablet","display","flex"],["style","paddingTop","20px"])(A("Intro","introduction"),A("Docs","docs"),A("Templates","templates"),A("Traits","traits"),A("State","state"),A("Patterns","patterns"),A("Factory","factory"),t.a(["style","marginTop","20px"],["style","color","white"],["style","padding","10px"],["style","textDecoration","none"],["style","border","1px solid rgba(255,255,255,0.2)"],["attr","href","https://github.com/linttrapmedia/oem"],["attr","target","_blank"])("GITHUB"))]])();function ot(){return t.div(["attr","data-part","App"],["style","display","grid"],["style","gridTemplateRows","max-content 1fr"],["style","gridTemplateColumns","1fr"],["style:tablet","gridTemplateRows","auto"],["style:tablet","gridTemplateColumns","max-content 1fr"],["style","height","100vh"],["style","justifyContent","start"],["style","width","100vw"],["style","overflow","hidden"],["style","minWidth",0])(t.div(["style","backgroundColor","black"],["style","padding","10px"])(q()),t.div(["attr","data-part","AppContent"],["style","display","flex"],["style","flexDirection","column"],["style","gap","50px"],["style","boxSizing","border-box"],["style","padding","20px 20px 100px"],["style","height","100%"],["style","overflowY","auto"],["style","overflowX","hidden"],["style","maxWidth","100%"],["style","minWidth",0],["html:menu",B,d.$test("introduction")],["html:menu",N,d.$test("docs")],["html:menu",K,d.$test("templates")],["html:menu",U,d.$test("traits")],["html:menu",D,d.$test("state")],["html:menu",j,d.$test("patterns")],["html:menu",_,d.$test("factory")])())}document.addEventListener("DOMContentLoaded",()=>{let e=document.getElementById("root");if(!e)return null;e.appendChild(ot())});function Y(){document.querySelector("[data-part='AppContent']")?.scrollTo({top:0})}d.sub(Y);document.addEventListener("keydown",(e)=>{let n=e.key,o=d.$val();if(n!=="ArrowRight"&&n!=="ArrowLeft")return;let s={introduction:n==="ArrowRight"?"docs":"factory",docs:n==="ArrowRight"?"templates":"introduction",templates:n==="ArrowRight"?"traits":"docs",traits:n==="ArrowRight"?"state":"templates",state:n==="ArrowRight"?"patterns":"traits",patterns:n==="ArrowRight"?"factory":"state",factory:n==="ArrowRight"?"introduction":"patterns"}[o];if(!s)return;d.set(s),Y()});

//# debugId=470DD1810196AB1364756E2164756E21
//# sourceMappingURL=app.js.map
